plugins {
  id 'java'
  id 'application'
}

ext {
  gdxVersion = '1.12.1' // Define your LibGDX version
  junitVersion = '5.10.0' // JUnit version for testing
  appName = 'SaveTheKing'
  projectVersion = '1.0.0'
}

repositories {
  mavenCentral()
}

dependencies {
  implementation "com.badlogicgames.gdx:gdx:$gdxVersion"

  // JUnit 5 dependencies for testing
  testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"

  // Optional: Mocking library (if needed)
  testImplementation "org.mockito:mockito-core:4.11.0"
}

tasks.withType(JavaCompile) {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
  options.encoding = 'UTF-8'
}

application {
  mainClass = 'savetheking.game.Main'
}

tasks.withType(Test) {
  useJUnitPlatform() // Enable JUnit 5 platform for tests
  testLogging {
    events "PASSED", "FAILED", "SKIPPED"
    exceptionFormat "full"
  }
}

jar {
  archiveFileName.set("${appName}-${projectVersion}.jar")
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  dependsOn configurations.runtimeClasspath
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
  manifest {
    attributes 'Main-Class': application.mainClass
  }
  doLast {
    file(archiveFile).setExecutable(true, false)
  }
}

// Optional Task to simplify cleaning and rebuilding
tasks.register('cleanBuild') {
  group = 'Build'
  description = 'Cleans and builds the project'
  dependsOn 'clean', 'build'
}
