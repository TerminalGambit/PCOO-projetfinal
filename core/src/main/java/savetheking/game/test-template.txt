# Test Structure Template for Chess Piece Classes

This template provides a structured format for implementing tests for different chess piece classes in a consistent way. Each new piece test (e.g., `KnightTest`, `RookTest`, `QueenTest`) should follow this structure to maintain uniformity and clarity across all tests.

## File Setup
- Import necessary classes: `Board`, `Point`, `Piece`, and specific pieces (`Knight`, `Rook`, `Queen`, etc.).
- Name the class appropriately (e.g., `KnightTest`, `RookTest`).

## Code Template

```java
package savetheking.game;

import java.util.List;

public class PieceTestTemplate {

    public static void main(String[] args) {
        // Initialize test cases for each piece type
        testPieceCenterMoves();
        testPieceEdgeMoves();
        testPieceCornerMoves();
        testPieceWithObstacles();
    }

    /**
     * Test moves for a piece in the center of the board.
     */
    private static void testPieceCenterMoves() {
        Board board = new Board(8, 8);

        // Initialize the piece at center position (customize piece type, e.g., Knight, Rook)
        Knight knight = new Knight("White", new Point(4, 4));
        board.placePiece(knight, knight.getPosition());

        // Retrieve possible moves
        List<Point> moves = knight.getPossibleMoves(board);

        // Output results
        System.out.println("Knight moves from (4,4) on an 8x8 board:");
        printMoves(moves);
        System.out.println("Expected: Provide expected output here for verification.");
    }

    /**
     * Test moves for a piece positioned on the edge of the board.
     */
    private static void testPieceEdgeMoves() {
        Board board = new Board(8, 8);

        // Customize piece type and initial position (e.g., edge position for Rook or Knight)
        Rook rook = new Rook("White", new Point(0, 4));
        board.placePiece(rook, rook.getPosition());

        List<Point> moves = rook.getPossibleMoves(board);

        // Output results
        System.out.println("Rook moves from (0,4) on an 8x8 board:");
        printMoves(moves);
        System.out.println("Expected: Provide expected output here for verification.");
    }

    /**
     * Test moves for a piece in the corner of the board.
     */
    private static void testPieceCornerMoves() {
        Board board = new Board(8, 8);

        // Customize the piece type and position (e.g., Knight in the corner)
        Knight knight = new Knight("White", new Point(0, 0));
        board.placePiece(knight, knight.getPosition());

        List<Point> moves = knight.getPossibleMoves(board);

        // Output results
        System.out.println("Knight moves from (0,0) on an 8x8 board:");
        printMoves(moves);
        System.out.println("Expected: Provide expected output here for verification.");
    }

    /**
     * Test moves for a piece with obstacles blocking paths.
     */
    private static void testPieceWithObstacles() {
        Board board = new Board(8, 8);

        // Place the piece to be tested (customize type, e.g., Rook)
        Rook rook = new Rook("White", new Point(2, 2));
        board.placePiece(rook, rook.getPosition());

        // Add obstacles (friendly and opponent pieces)
        board.placePiece(new Rook("White", new Point(2, 5))); // Friendly piece blocks moves
        board.placePiece(new Rook("Black", new Point(6, 2))); // Opponent piece, can be captured

        List<Point> moves = rook.getPossibleMoves(board);

        // Output results
        System.out.println("Rook moves from (2,2) with obstacles:");
        printMoves(moves);
        System.out.println("Expected: Blocked horizontally by friendly piece, can capture opponent vertically.");
    }

    /**
     * Helper method to print moves in a standardized format.
     */
    private static void printMoves(List<Point> moves) {
        for (Point move : moves) {
            System.out.print("(" + move.x + "," + move.y + ") ");
        }
        System.out.println();
    }
}
